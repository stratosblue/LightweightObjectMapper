// <Auto-Generated/>

#if !NO_BUILD_ERROR_CODE

using System;
using LightweightObjectMapper;

namespace MapperTestLibrary;

internal class AmbiguousMapTypeMapClass1
{
    public int Property1 { get; set; }
}

internal class AmbiguousMapTypeMapClass2 : IDisposable
{
    public int Property1 { get; set; }

    public void Dispose()
    {
        throw new NotImplementedException();
    }
}

file class Extensions
{
    public Extensions()
    {
        var instance = new AmbiguousMapTypeMapClass1();
        var instance2 = new AmbiguousMapTypeMapClass2();

        //21

        instance.MapTo<Boolean>();
        instance.MapTo<Byte>();
        instance.MapTo<SByte>();
        instance.MapTo<Int16>();
        instance.MapTo<UInt16>();
        instance.MapTo<Int32>();
        instance.MapTo<UInt32>();
        instance.MapTo<Int64>();
        instance.MapTo<UInt64>();
        instance.MapTo<IntPtr>();
        instance.MapTo<UIntPtr>();
        instance.MapTo<Single>();
        instance.MapTo<Double>();
        instance.MapTo<Decimal>();
        instance.MapTo<TimeSpan>();
        instance.MapTo<DateTime>();
        instance.MapTo<Guid>();
        instance.MapTo<Char>();
        instance.MapTo<String>();
        instance.MapTo<IDisposable>();
        instance.MapTo<object>();

        //21

        instance.MapTo(true);
        instance.MapTo(byte.MaxValue);
        instance.MapTo(sbyte.MaxValue);
        instance.MapTo(Int16.MaxValue);
        instance.MapTo(UInt16.MaxValue);
        instance.MapTo(Int32.MaxValue);
        instance.MapTo(UInt32.MaxValue);
        instance.MapTo(Int64.MaxValue);
        instance.MapTo(UInt64.MaxValue);
        instance.MapTo(IntPtr.Zero);
        instance.MapTo(UIntPtr.Zero);
        instance.MapTo(Single.MaxValue);
        instance.MapTo(Double.MaxValue);
        instance.MapTo(Decimal.MaxValue);
        instance.MapTo(TimeSpan.MaxValue);
        instance.MapTo(DateTime.MaxValue);
        instance.MapTo(Guid.Empty);
        instance.MapTo(char.MaxValue);
        instance.MapTo(string.Empty);
        instance.MapTo(instance2 as IDisposable);
        instance.MapTo(instance2 as object);

        ////18

        //var bool1 = true;
        //instance.MapTo(ref bool1);

        //var byte1 = byte.MaxValue;
        //instance.MapTo(ref byte1);

        //var sbyte1 = sbyte.MaxValue;
        //instance.MapTo(ref sbyte1);

        //var i161 = Int16.MaxValue;
        //instance.MapTo(ref i161);

        //var ui161 = UInt16.MaxValue;
        //instance.MapTo(ref ui161);

        //var i321 = Int32.MaxValue;
        //instance.MapTo(ref i321);

        //var ui321 = UInt32.MaxValue;
        //instance.MapTo(ref ui321);

        //var i641 = Int64.MaxValue;
        //instance.MapTo(ref i641);

        //var ui641 = UInt64.MaxValue;
        //instance.MapTo(ref ui641);

        //var intptr1 = IntPtr.Zero;
        //instance.MapTo(ref intptr1);

        //var uintptr1 = UIntPtr.Zero;
        //instance.MapTo(ref uintptr1);

        //var singel1 = Single.MaxValue;
        //instance.MapTo(ref singel1);

        //var double1 = Double.MaxValue;
        //instance.MapTo(ref double1);

        //var decimal1 = Decimal.MaxValue;
        //instance.MapTo(ref decimal1);

        //var timespan1 = TimeSpan.MaxValue;
        //instance.MapTo(ref timespan1);

        //var datetime1 = DateTime.MaxValue;
        //instance.MapTo(ref datetime1);

        //var guid1 = Guid.Empty;
        //instance.MapTo(ref guid1);

        //var char1 = char.MaxValue;
        //instance.MapTo(ref char1);
    }
}

#endif
