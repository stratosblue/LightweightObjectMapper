// <Auto-Generated/>
using LightweightObjectMapper;

namespace MapperTestLibrary;

internal record TypeMappingMappingProfileMapRecord1(int Property1, double Property2, string Property3, bool Property4)
{
    public int? Property5 { get; set; }

    public int? Property6 { get; set; }
}

internal record TypeMappingMappingProfileMapRecord2(int Property1, double Property2, string Property3, bool Property4)
{
    public int? Property5 { get; set; }

    public int? Property6 { get; set; }
}

[MappingProfile]
internal partial class RecordMappingMappingProfileMapProfile1
    : IMappingPrepare<TypeMappingMappingProfileMapRecord1, TypeMappingMappingProfileMapRecord2>
    , IMappingPrepare<TypeMappingMappingProfileMapRecord2, TypeMappingMappingProfileMapRecord1>
{
    public TypeMappingMappingProfileMapRecord2 MappingPrepare(TypeMappingMappingProfileMapRecord1 source) => new TypeMappingMappingProfileMapRecord2(source.Property1, source.Property2, source.Property3, source.Property4);

    public TypeMappingMappingProfileMapRecord1 MappingPrepare(TypeMappingMappingProfileMapRecord2 source) => new TypeMappingMappingProfileMapRecord1(source.Property1, source.Property2, source.Property3, source.Property4);
}

file class Extensions
{
    public Extensions()
    {
        new TypeMappingMappingProfileMapRecord1(default, default, default, default).MapTo<TypeMappingMappingProfileMapRecord2>();
        new TypeMappingMappingProfileMapRecord2(default, default, default, default).MapTo<TypeMappingMappingProfileMapRecord1>();
    }
}
