// <Auto-Generated/>
using LightweightObjectMapper;

namespace MapperTestLibrary;

internal class MappingPrepareMappingProfileMapClass1
{
    public int Property1 { get; set; }

    public double Property2 { get; set; }

    public string Property3 { get; set; }

    public bool Property4 { get; set; }

    public int? Property5 { get; set; }

    public int? Property6 { get; set; }
}

internal class MappingPrepareMappingProfileMapClass2
{
    private readonly int _inputHashCode;

    public int Property1 { get; set; }

    public double Property2 { get; set; }

    public string Property3 { get; set; }

    public bool Property4 { get; set; }

    public int? Property5 { get; set; }

    public int? Property6 { get; set; }

    public MappingPrepareMappingProfileMapClass2(int inputHashCode)
    {
        _inputHashCode = inputHashCode;
    }

    public override int GetHashCode() => _inputHashCode;
}

[MappingProfile]
internal partial class MappingPrepareMappingProfileMapProfile1
    : IMappingPrepare<MappingPrepareMappingProfileMapClass1, MappingPrepareMappingProfileMapClass2>
    , IMappingPrepare<MappingPrepareMappingProfileMapClass2, MappingPrepareMappingProfileMapClass2>
{
    public MappingPrepareMappingProfileMapClass2 MappingPrepare(MappingPrepareMappingProfileMapClass1 source)
    {
        return new MappingPrepareMappingProfileMapClass2(source.GetHashCode());
    }

    public MappingPrepareMappingProfileMapClass2 MappingPrepare(MappingPrepareMappingProfileMapClass2 source)
    {
        return new MappingPrepareMappingProfileMapClass2(source.GetHashCode());
    }
}

file class Extensions
{
    public Extensions()
    {
        new MappingPrepareMappingProfileMapClass1().MapTo<MappingPrepareMappingProfileMapClass2>();
        new MappingPrepareMappingProfileMapClass2(0).MapTo<MappingPrepareMappingProfileMapClass2>();
    }
}
